dds = DESeqDataSetFromMatrix(countData=countData,
colData=colData,
design=~condition)
dds = DESeqDataSetFromMatrix(countData=countData,
colData=colData,
design=~condition)
dds = DESeqDataSetFromMatrix(countData=countData,
colData=colData,
design=~condition)
library(DESeq2)
metaFile <- read.csv("GSE37704_metadata.csv")
countFile <- read.csv("GSE37704_featurecounts.csv")
# Import metadata and take a peak
colData = read.csv("GSE37704_metadata.csv",
row.names=1)
head(colData)
#Import countdata
countData = read.csv("GSE37704_featurecounts.csv", row.names=1)
head(countData)
# Note we need to remove the odd first $length col
countData <- as.matrix(countData[, -1])
head(countData)
# Filter count data where you have 0 read count across all samples.
countData = countData[rowSums(countData)>1,]
head(countData)
dds = DESeqDataSetFromMatrix(countData=countData,
colData=colData,
design=~condition)
dds = DESeq(dds)
?library
dds = DESeqDataSetFromMatrix(countData=countData,
colData=colData,
design=~condition)
dds = DESeq(dds)
dds
res= results(dds, contrast=c("condition", "hoxa1_kd", "control_sirna"))
summary(res)
plot( res$log2FoldChange, -log(res$padj))
#Make a color vector for all genes
mycols <- rep("gray", nrow(res))
#Make a color vector for all genes
mycols <- rep("gray", nrow(res))
#Color red the genes with absolute fold change above 2
mycols[ abs(res$log2FoldChange) > 2] <- "red"
#Color blue those with adjusted p-value less than 0.01
# and the absolute fold change more then 2
inds <- (res$pvalue < 0.01) & (abs(res$log2FoldChange) > 2)
mycols[ inds ] <- "blue"
plot( res$log2FoldChange, -log(res$padj), col=mycols, xlab="Log2(FoldChange)", ylab="-Log(P-value)")
library("AnnotationDbi")
library("org.Hs.eg.db")
library("AnnotationDbi")
library("org.Hs.eg.db")
BiocManager::install("DBI")
BiocManager::install("AnnotationDbi")
BiocManager::install("org.Hs.eg.db")
library("AnnotationDbi")
library("org.Hs.eg.db")
columns(org.Hs.eg.db)
res$symbol = mapIds(org.Hs.eg.db,
keys=___,
library("AnnotationDbi")
library("org.Hs.eg.db")
columns(org.Hs.eg.db)
res$symbol = mapIds(org.Hs.eg.db,
keys=row.names(res),
keytype="ENSEMBL",
column="SYMBOL",
multiVals="first")
res$entrez = mapIds(org.Hs.eg.db,
keys=row.names(res),
keytype="ENSEMBL",
column="ENTREZID",
multiVals="first")
res$name =   mapIds(org.Hs.eg.db,
keys=row.names(res),
keytype="ENSEMBL",
column="ENTREZID",
multiVals="first")
head(res, 10)
library("AnnotationDbi")
library("org.Hs.eg.db")
columns(org.Hs.eg.db)
res$symbol = mapIds(org.Hs.eg.db,
keys=row.names(res),
keytype="ENSEMBL",
column="SYMBOL",
multiVals="first")
res$entrez = mapIds(org.Hs.eg.db,
keys=row.names(res),
keytype="ENSEMBL",
column="ENTREZID",
multiVals="first")
res$name =   mapIds(org.Hs.eg.db,
keys=row.names(res),
keytype="ENSEMBL",
column="GENENAME",
multiVals="first")
head(res, 10)
res = res[order(res$pvalue),]
write.csv(res, file="deseq_results.csv")
BiocManager::install( c("pathview", "gage", "gageData") )
library(pathview)
library(gage)
library(gageData)
data(kegg.sets.hs)
data(sigmet.idx.hs)
# Focus on signaling and metabolic pathways only
kegg.sets.hs = kegg.sets.hs[sigmet.idx.hs]
# Examine the first 3 pathways
head(kegg.sets.hs, 3)
foldchanges = res$log2FoldChange
names(foldchanges) = res$entrez
head(foldchanges)
# Get the results
keggres = gage(foldchanges, gsets=kegg.sets.hs)
attributes(keggres)
# Look at the first few down (less) pathways
head(keggres$less)
pathview(gene.data=foldchanges, pathway.id="hsa04110")
## Focus on top 5 upregulated pathways here for demo purposes only
keggrespathways <- rownames(keggres$greater)[1:5]
# Extract the 8 character long IDs part of each string
keggresids = substr(keggrespathways, start=1, stop=8)
keggresids
pathview(gene.data=foldchanges, pathway.id=keggresids, species="hsa")
data(go.sets.hs)
data(go.subs.hs)
# Focus on Biological Process subset of GO
gobpsets = go.sets.hs[go.subs.hs$BP]
gobpres = gage(foldchanges, gsets=gobpsets, same.dir=TRUE)
lapply(gobpres, head)
sig_genes <- res[res$padj <= 0.05 & !is.na(res$padj), "symbol"]
print(paste("Total number of significant genes:", length(sig_genes)))
write.table(sig_genes, file="significant_genes.txt", row.names=FALSE, col.names=FALSE, quote=FALSE)
write.table(sig_genes, file="significant_genes.txt", row.names=FALSE, col.names=FALSE, quote=FALSE)
library(DESeq2)
metaFile <- read.csv("GSE37704_metadata.csv")
countFile <- read.csv("GSE37704_featurecounts.csv")
# Import metadata and take a peak
colData = read.csv("GSE37704_metadata.csv",
row.names=1)
head(colData)
#Import countdata
countData = read.csv("GSE37704_featurecounts.csv", row.names=1)
head(countData)
# Note we need to remove the odd first $length col
countData <- as.matrix(countData[, -1])
head(countData)
# Filter count data where you have 0 read count across all samples.
countData = countData[rowSums(countData)>1,]
head(countData)
dds = DESeqDataSetFromMatrix(countData=countData,
colData=colData,
design=~condition)
dds = DESeq(dds)
dds
plot( res$log2FoldChange, -log(res$padj))
summary(res)
plot( res$log2FoldChange, -log(res$padj))
res= results(dds, contrast=c("condition", "hoxa1_kd", "control_sirna"))
summary(res)
plot( res$log2FoldChange, -log(res$padj))
#Make a color vector for all genes
mycols <- rep("gray", nrow(res))
#Color red the genes with absolute fold change above 2
mycols[ abs(res$log2FoldChange) > 2] <- "red"
#Color blue those with adjusted p-value less than 0.01
# and the absolute fold change more then 2
inds <- (res$pvalue < 0.01) & (abs(res$log2FoldChange) > 2)
mycols[ inds ] <- "blue"
plot( res$log2FoldChange, -log(res$padj), col=mycols, xlab="Log2(FoldChange)", ylab="-Log(P-value)")
library("AnnotationDbi")
library("org.Hs.eg.db")
columns(org.Hs.eg.db)
res$symbol = mapIds(org.Hs.eg.db,
keys=row.names(res),
keytype="ENSEMBL",
column="SYMBOL",
multiVals="first")
res$entrez = mapIds(org.Hs.eg.db,
keys=row.names(res),
keytype="ENSEMBL",
column="ENTREZID",
multiVals="first")
res$name =   mapIds(org.Hs.eg.db,
keys=row.names(res),
keytype="ENSEMBL",
column="GENENAME",
multiVals="first")
head(res, 10)
res = res[order(res$pvalue),]
write.csv(res, file="deseq_results.csv")
library(pathview)
